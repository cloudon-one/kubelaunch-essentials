global:
  enabled: true
  tlsDisable: false

injector:
  enabled: ${injector_enabled}
  image:
    repository: "hashicorp/vault-k8s"
    tag: "1.3.0"
  
  resources:
    requests:
      memory: "256Mi"
      cpu: "250m"
    limits:
      memory: "512Mi"
      cpu: "500m"

  securityContext:
    runAsNonRoot: true
    runAsUser: 100
    capabilities:
      drop: 
        - ALL

server:
  image:
    repository: "hashicorp/vault"
    tag: "1.15.2"
  
  ha:
    enabled: true
    replicas: ${replicas}
    raft:
      enabled: true
      setNodeId: true
      config: |
        ui = true
        
        listener "tcp" {
          tls_disable = 0
          tls_cert_file = "/vault/userconfig/vault-tls/tls.crt"
          tls_key_file  = "/vault/userconfig/vault-tls/tls.key"
          tls_min_version = "tls12"
          address = "[::]:8200"
          cluster_address = "[::]:8201"
        }
        
        storage "raft" {
          path = "/vault/data"
          
          retry_join {
            auto_join = "provider=aws region=${aws_region} tag_key=${node_selector_key} tag_value=${node_selector_value}"
          }
        }
        
        seal "awskms" {
          region     = "${aws_region}"
          kms_key_id = "${kms_key_id}"
        }
        
        telemetry {
          prometheus_retention_time = "30s"
          disable_hostname = true
        }
        
        service_registration "kubernetes" {}

  resources: ${jsonencode(resources)}

  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              app.kubernetes.io/name: vault
              app.kubernetes.io/instance: vault
              component: server
          topologyKey: topology.kubernetes.io/zone
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
              - key: eks.amazonaws.com/compute-type
                operator: NotIn
                values:
                  - fargate

  dataStorage:
    enabled: true
    size: "${storage_size}"
    storageClass: "${storage_class}"
    accessMode: "ReadWriteOnce"

  auditStorage:
    enabled: true
    size: "${audit_storage_size}"
    storageClass: "${storage_class}"
    accessMode: "ReadWriteOnce"

  service:
    enabled: true
    type: ClusterIP
    port: 8200
    targetPort: 8200
    annotations:
      service.beta.kubernetes.io/aws-load-balancer-type: nlb
      service.beta.kubernetes.io/aws-load-balancer-internal: "true"
      service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"

  securityContext:
    runAsNonRoot: true
    runAsUser: 100
    runAsGroup: 1000
    fsGroup: 1000
    capabilities:
      drop:
        - ALL

  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8200"
    prometheus.io/path: "/v1/sys/metrics"

  extraEnvironmentVars:
    VAULT_ADDR: "https://127.0.0.1:8200"
    VAULT_API_ADDR: "https://$(POD_IP):8200"
    VAULT_CLUSTER_ADDR: "https://$(POD_IP):8201"
    VAULT_SKIP_VERIFY: "true"
    VAULT_LOG_FORMAT: "json"
    VAULT_LOG_LEVEL: "info"

  serviceAccount:
    create: false
    name: ${service_account_name}
    annotations:
      eks.amazonaws.com/role-arn: ${iam_role_arn}

ui:
  enabled: ${ui_enabled}
  serviceType: "ClusterIP"
  annotations: ${jsonencode(ingress_annotations)}
  %{ if ingress_enabled }
  ingress:
    enabled: true
    hosts:
      - host: ${ingress_host}
        paths:
          - path: "/"
            pathType: Prefix
    annotations: ${jsonencode(ingress_annotations)}
  %{ endif }

csi:
  enabled: ${csi_enabled}
  image:
    repository: "hashicorp/vault-csi-provider"
    tag: "1.4.0"
  resources:
    requests:
      memory: "256Mi"
      cpu: "250m"
    limits:
      memory: "512Mi"
      cpu: "500m"
