name: npm-test-coverage
description: |
  Execute NPM tests with code coverage reporting.
  Features:
  - Configurable Node.js version
  - Custom test commands and patterns
  - Coverage threshold configuration
  - Test result reporting
  - Package caching
  - Detailed coverage reporting

inputs:
  npm-token:
    description: 'NPM authentication token'
    required: true
  node-version:
    description: 'Node.js version to use'
    required: false
    default: '18'
  coverage-threshold:
    description: 'Minimum coverage threshold (0-100)'
    required: false
    default: '80'
  test-command:
    description: 'Custom test command to run'
    required: false
    default: 'test:cov'
  test-pattern:
    description: 'Test file pattern to match'
    required: false
    default: '**/*.test.{js,jsx,ts,tsx}'
  include-files:
    description: 'Include file details in coverage report'
    required: false
    default: 'false'
  custom-jest-config:
    description: 'Custom Jest configuration options (JSON)'
    required: false
    default: '{}'

runs:
  using: "composite"
  steps:
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ inputs.node-version }}
        registry-url: 'https://registry.npmjs.org'

    - name: Cache npm dependencies
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-npm-

    - name: Install dependencies
      shell: bash
      run: |
        npm config set //registry.npmjs.org/:_authToken=${{ inputs.npm-token }}
        npm ci
      env:
        NPM_AUTH_TOKEN: ${{ inputs.npm-token }}

    - name: Install test reporters
      shell: bash
      run: npm i --save-dev jest-junit

    - name: Create Jest config
      shell: bash
      run: |
        echo '{
          "testMatch": ["${{ inputs.test-pattern }}"],
          "coverageReporters": ["text", "text-summary", "cobertura", "json-summary"],
          "coverageThreshold": {
            "global": {
              "statements": ${{ inputs.coverage-threshold }},
              "branches": ${{ inputs.coverage-threshold }},
              "functions": ${{ inputs.coverage-threshold }},
              "lines": ${{ inputs.coverage-threshold }}
            }
          },
          "testResultsProcessor": "jest-junit",
          "reporters": ["default", "jest-junit"],
          ...(${{ inputs.custom-jest-config }})
        }' > jest.config.json

    - name: Run tests with coverage
      shell: bash
      run: |
        # Create test command with proper configuration
        TEST_CMD="npm run ${{ inputs.test-command }} -- \
          --config=jest.config.json \
          --ci \
          --coverage \
          --testLocationInResults \
          --json --outputFile=jest-results.json"

        # Run tests and capture output
        if ! $TEST_CMD > test.md 2>&1; then
          echo "::error::Tests failed. Check the logs for details."
          exit 1
        fi
      env:
        JEST_JUNIT_OUTPUT_DIR: "."
        JEST_JUNIT_OUTPUT_NAME: "junit.xml"
        NPM_AUTH_TOKEN: ${{ inputs.npm-token }}

    - name: Process coverage report
      shell: bash
      run: |
        # Extract coverage summary
        COVERAGE_SUMMARY=$(cat coverage/coverage-summary.json)
        TOTAL_LINES=$(echo $COVERAGE_SUMMARY | jq -r '.total.lines.pct')
        
        echo "Total line coverage: $TOTAL_LINES%"
        
        if (( $(echo "$TOTAL_LINES < ${{ inputs.coverage-threshold }}" | bc -l) )); then
          echo "::error::Coverage ($TOTAL_LINES%) is below threshold (${{ inputs.coverage-threshold }}%)"
          exit 1
        fi

    - name: Publish test results (EnricoMi)
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        files: "junit.xml"
        check_name: "Test Results"

    - name: Publish test results (dorny)
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: "Detailed Test Results"
        path: "junit.xml"
        reporter: jest-junit

    - name: Generate coverage report
      shell: bash
      run: |
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "## Test Coverage Report" >> $GITHUB_STEP_SUMMARY
        echo "### Configuration" >> $GITHUB_STEP_SUMMARY
        echo "- Node.js Version: ${{ inputs.node-version }}" >> $GITHUB_STEP_SUMMARY
        echo "- Coverage Threshold: ${{ inputs.coverage-threshold }}%" >> $GITHUB_STEP_SUMMARY
        echo "- Test Pattern: ${{ inputs.test-pattern }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### Results" >> $GITHUB_STEP_SUMMARY
        if [ "${{ inputs.include-files }}" = "true" ]; then
          cat test.md >> $GITHUB_STEP_SUMMARY
        else
          sed -i -e '1,5d;$ d' test.md
          sed -i 's/-*$//' test.md
          sed -i 's/Uncovered Line #s//gi' test.md
          sed -i '/.*\.[jt]sx\?/d' test.md
          sed -i 's/All files/**All files**/gi' test.md
          cat test.md >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "For detailed coverage information, check the job artifacts." >> $GITHUB_STEP_SUMMARY

    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: coverage-report
        path: |
          coverage/
          jest-results.json
          junit.xml
        retention-days: 14
